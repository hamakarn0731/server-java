/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.0/userguide/java_library_plugin.html
 */

plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'
    id 'java'
    id 'war'
    id 'eclipse'
    id 'eclipse-wtp'
}

task copyDomaResources(type: Sync)  {
    from sourceSets.main.resources.srcDirs
    into compileJava.destinationDir
    include 'doma.compile.config'
    include 'META-INF/**/*.sql'
    include 'META-INF/**/*.script'
}

// エンコーディング
def defaultEncoding = 'UTF-8'

compileJava {
    // Depend on the above task
    dependsOn copyDomaResources
    options.encoding = defaultEncoding
}
compileTestJava {
    options.encoding = defaultEncoding
}

// ソースと実行ファイルのJava バージョン
def jdkVersion = 1.8
sourceCompatibility = jdkVersion
targetCompatibility = jdkVersion

//WebContentフォルダーを入れる
webAppDirName = 'WebContent'

repositories {
    mavenCentral()
}

dependencies {

    api 'org.springframework:spring-webmvc:5.2.5.RELEASE'
    api 'org.thymeleaf:thymeleaf-spring5:3.0.11.RELEASE'
    api 'org.springframework.security:spring-security-web:5.3.1.RELEASE'
    api 'org.springframework.security:spring-security-config:5.3.1.RELEASE'

    api 'org.xerial:sqlite-jdbc:3.30.1'
    api 'org.seasar.doma:doma:2.29.0'
    annotationProcessor 'org.seasar.doma:doma:2.29.0'

    providedCompile group: 'javax.servlet', name: 'javax.servlet-api', version: '4.0.1'

    // Use JUnit test framework
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'
}
import org.gradle.plugins.ide.eclipse.model.SourceFolder
eclipse {
    project {
        // nature の追加
        // eclipse-wtp にデフォルトで含まれている nature
        natures 'org.eclipse.buildship.core.gradleprojectnature'
    }
    // .classpath の設定
    classpath {
        defaultOutputDir = file("bin/main")
        file {
            // 出力パスをdoma用に調整
            whenMerged { classpath ->
                classpath.entries.findAll { it instanceof SourceFolder && it.path.startsWith("src/main/java")      }*.output = "bin/main"
                classpath.entries.findAll { it instanceof SourceFolder && it.path.startsWith("src/main/resources") }*.output = "bin/main"
                classpath.entries.findAll { it instanceof SourceFolder && it.path.startsWith("src/test/java")      }*.output = "bin/test"
                classpath.entries.findAll { it instanceof SourceFolder && it.path.startsWith("src/test/resources") }*.output = "bin/test"
            }
        }
    }

    wtp {
        // プロジェクトファセットの設定
        // プロジェクトのプロパティ->[プロジェクト・ファセット]を設定する
        // .settings/org.eclipse.wst.common.component の設定
        facet {
            // Java
            facet name: 'jst.java', version: jdkVersion
            // 動的 web モジュール
            facet name: 'jst.web', version: '4.0'
        }
    }
    jdt {
        file {
            withProperties {properties ->
                properties.setProperty('org.eclipse.jdt.core.compiler.processAnnotations', 'enabled')
            }
        }
    }
}
eclipseJdt {
    doFirst {
        def factorypath = file('.factorypath')
        def writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(new FileOutputStream(factorypath),"UTF8")))
        def xml = new groovy.xml.MarkupBuilder(writer)
        xml.setDoubleQuotes(true)
        xml.'factorypath'() {
            def domaJar = configurations.annotationProcessor.find {
                it.name.startsWith('doma-2')
            }
            'factorypathentry'(kind: 'EXTJAR', id: domaJar, enabled: true, runInBatchMode: false)
        }
    }
}